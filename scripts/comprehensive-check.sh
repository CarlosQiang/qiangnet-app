#!/bin/bash

echo "üîç VERIFICACI√ìN EXHAUSTIVA PRE-DESPLIEGUE QIANGNET"
echo "=================================================="

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Funci√≥n para verificar archivos
check_file() {
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ $1 - EXISTE${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1 - FALTANTE${NC}"
        return 1
    fi
}

# Funci√≥n para verificar directorios
check_dir() {
    if [ -d "$1" ]; then
        echo -e "${GREEN}‚úÖ $1/ - EXISTE${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $1/ - FALTANTE${NC}"
        return 1
    fi
}

# Contador de errores
errors=0

echo "üìÅ VERIFICANDO ESTRUCTURA DE ARCHIVOS"
echo "====================================="

# Archivos de configuraci√≥n cr√≠ticos
config_files=(
    "package.json"
    "next.config.js"
    "tailwind.config.ts"
    "tsconfig.json"
    "postcss.config.js"
    "Dockerfile"
    "docker-compose.yml"
    ".env.example"
    ".gitignore"
)

for file in "${config_files[@]}"; do
    if ! check_file "$file"; then
        ((errors++))
    fi
done

# Directorios cr√≠ticos
critical_dirs=(
    "app"
    "components"
    "components/ui"
    "lib"
    "contexts"
    "hooks"
    "public"
    "nginx"
    "scripts"
)

echo ""
echo "üìÇ VERIFICANDO DIRECTORIOS CR√çTICOS"
echo "==================================="

for dir in "${critical_dirs[@]}"; do
    if ! check_dir "$dir"; then
        ((errors++))
    fi
done

# Archivos de la aplicaci√≥n
echo ""
echo "üìÑ VERIFICANDO ARCHIVOS DE LA APLICACI√ìN"
echo "========================================"

app_files=(
    "app/layout.tsx"
    "app/page.tsx"
    "app/login/page.tsx"
    "app/dashboard/page.tsx"
    "app/admin/page.tsx"
    "app/globals.css"
    "lib/utils.ts"
    "lib/types.ts"
    "lib/api.ts"
    "components/ui/Button.tsx"
    "components/ui/Card.tsx"
    "components/ui/Input.tsx"
)

for file in "${app_files[@]}"; do
    if ! check_file "$file"; then
        ((errors++))
    fi
done

# Verificar configuraci√≥n de Docker
echo ""
echo "üê≥ VERIFICANDO CONFIGURACI√ìN DOCKER"
echo "==================================="

if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker instalado - $(docker --version)${NC}"
else
    echo -e "${RED}‚ùå Docker NO instalado${NC}"
    ((errors++))
fi

if command -v docker-compose &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker Compose instalado - $(docker-compose --version)${NC}"
else
    echo -e "${RED}‚ùå Docker Compose NO instalado${NC}"
    ((errors++))
fi

# Verificar sintaxis de docker-compose.yml
if [ -f "docker-compose.yml" ]; then
    if docker-compose config > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ docker-compose.yml - SINTAXIS V√ÅLIDA${NC}"
    else
        echo -e "${RED}‚ùå docker-compose.yml - SINTAXIS INV√ÅLIDA${NC}"
        ((errors++))
    fi
fi

# Verificar package.json
echo ""
echo "üì¶ VERIFICANDO DEPENDENCIAS"
echo "==========================="

if [ -f "package.json" ]; then
    # Verificar dependencias cr√≠ticas
    critical_deps=("next" "react" "react-dom" "tailwindcss" "typescript")
    
    for dep in "${critical_deps[@]}"; do
        if grep -q "\"$dep\"" package.json; then
            echo -e "${GREEN}‚úÖ $dep - PRESENTE${NC}"
        else
            echo -e "${RED}‚ùå $dep - FALTANTE${NC}"
            ((errors++))
        fi
    done
    
    # Verificar scripts
    if grep -q "\"build\"" package.json; then
        echo -e "${GREEN}‚úÖ Script build - PRESENTE${NC}"
    else
        echo -e "${RED}‚ùå Script build - FALTANTE${NC}"
        ((errors++))
    fi
fi

# Verificar configuraci√≥n de NGINX
echo ""
echo "üåê VERIFICANDO CONFIGURACI√ìN NGINX"
echo "=================================="

if check_file "nginx/nginx.conf"; then
    # Verificar sintaxis b√°sica
    if grep -q "server {" nginx/nginx.conf && grep -q "location /" nginx/nginx.conf; then
        echo -e "${GREEN}‚úÖ nginx.conf - CONFIGURACI√ìN B√ÅSICA V√ÅLIDA${NC}"
    else
        echo -e "${RED}‚ùå nginx.conf - CONFIGURACI√ìN INCOMPLETA${NC}"
        ((errors++))
    fi
fi

# Verificar scripts de base de datos
echo ""
echo "üóÑÔ∏è VERIFICANDO SCRIPTS DE BASE DE DATOS"
echo "======================================="

if check_file "scripts/init-db.sql"; then
    if grep -q "CREATE TABLE" scripts/init-db.sql; then
        echo -e "${GREEN}‚úÖ init-db.sql - CONTIENE TABLAS${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è init-db.sql - NO CONTIENE TABLAS${NC}"
    fi
fi

# Verificar configuraci√≥n de Next.js
echo ""
echo "‚öõÔ∏è VERIFICANDO CONFIGURACI√ìN NEXT.JS"
echo "===================================="

if [ -f "next.config.js" ]; then
    if grep -q "output.*standalone" next.config.js; then
        echo -e "${GREEN}‚úÖ next.config.js - CONFIGURADO PARA DOCKER${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è next.config.js - FALTA CONFIGURACI√ìN DOCKER${NC}"
    fi
fi

# Verificar TypeScript
echo ""
echo "üìù VERIFICANDO CONFIGURACI√ìN TYPESCRIPT"
echo "======================================="

if [ -f "tsconfig.json" ]; then
    if node -e "JSON.parse(require('fs').readFileSync('tsconfig.json', 'utf8'))" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ tsconfig.json - JSON V√ÅLIDO${NC}"
    else
        echo -e "${RED}‚ùå tsconfig.json - JSON INV√ÅLIDO${NC}"
        ((errors++))
    fi
fi

# Verificar variables de entorno
echo ""
echo "üîß VERIFICANDO VARIABLES DE ENTORNO"
echo "==================================="

if [ -f ".env.example" ]; then
    required_vars=("NEXT_PUBLIC_API_URL" "JWT_SECRET" "DB_PASSWORD")
    
    for var in "${required_vars[@]}"; do
        if grep -q "$var" .env.example; then
            echo -e "${GREEN}‚úÖ $var - DEFINIDA EN EJEMPLO${NC}"
        else
            echo -e "${RED}‚ùå $var - FALTANTE EN EJEMPLO${NC}"
            ((errors++))
        fi
    done
fi

# Verificar puertos
echo ""
echo "üîå VERIFICANDO CONFIGURACI√ìN DE PUERTOS"
echo "======================================="

if [ -f "docker-compose.yml" ]; then
    if grep -q "3000:3000" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Puerto 3000 (Frontend) - CONFIGURADO${NC}"
    else
        echo -e "${RED}‚ùå Puerto 3000 (Frontend) - NO CONFIGURADO${NC}"
        ((errors++))
    fi
    
    if grep -q "3001:3001" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Puerto 3001 (API) - CONFIGURADO${NC}"
    else
        echo -e "${RED}‚ùå Puerto 3001 (API) - NO CONFIGURADO${NC}"
        ((errors++))
    fi
    
    if grep -q "5432:5432" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Puerto 5432 (PostgreSQL) - CONFIGURADO${NC}"
    else
        echo -e "${RED}‚ùå Puerto 5432 (PostgreSQL) - NO CONFIGURADO${NC}"
        ((errors++))
    fi
fi

# Verificar healthchecks
echo ""
echo "üè• VERIFICANDO HEALTHCHECKS"
echo "==========================="

if [ -f "docker-compose.yml" ]; then
    if grep -q "healthcheck:" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Healthchecks - CONFIGURADOS${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Healthchecks - NO CONFIGURADOS${NC}"
    fi
fi

# Verificar seguridad
echo ""
echo "üîí VERIFICANDO CONFIGURACI√ìN DE SEGURIDAD"
echo "========================================="

security_checks=0

if [ -f "Dockerfile" ]; then
    if grep -q "USER.*nextjs" Dockerfile; then
        echo -e "${GREEN}‚úÖ Usuario no-root en Dockerfile${NC}"
        ((security_checks++))
    fi
fi

if [ -f "nginx/nginx.conf" ]; then
    if grep -q "X-Frame-Options" nginx/nginx.conf; then
        echo -e "${GREEN}‚úÖ Headers de seguridad en NGINX${NC}"
        ((security_checks++))
    fi
fi

if [ -f "next.config.js" ]; then
    if grep -q "headers" next.config.js; then
        echo -e "${GREEN}‚úÖ Headers de seguridad en Next.js${NC}"
        ((security_checks++))
    fi
fi

echo -e "${GREEN}‚úÖ Verificaciones de seguridad pasadas: $security_checks/3${NC}"

# Resumen final
echo ""
echo "üìä RESUMEN DE VERIFICACI√ìN"
echo "========================="

if [ $errors -eq 0 ]; then
    echo -e "${GREEN}üéâ VERIFICACI√ìN COMPLETADA SIN ERRORES${NC}"
    echo -e "${GREEN}‚úÖ LA APLICACI√ìN EST√Å LISTA PARA DESPLIEGUE${NC}"
    exit 0
else
    echo -e "${RED}‚ùå SE ENCONTRARON $errors ERRORES${NC}"
    echo -e "${RED}üö´ CORRIGE LOS ERRORES ANTES DEL DESPLIEGUE${NC}"
    exit 1
fi
